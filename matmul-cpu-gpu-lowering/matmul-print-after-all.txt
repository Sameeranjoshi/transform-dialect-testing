// -----// IR Dump After StablehloLegalizeToHloPass (stablehlo-legalize-to-hlo) //----- //
module {
  func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After LegalizeControlFlowPass (mhlo-legalize-control-flow) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After TopLevelSCFToCFG (iree-top-level-scf-to-cfg) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After MHLOToMHLOPreprocessing (iree-mhlo-to-mhlo-preprocessing) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After ShapeToShapeLowering (shape-to-shape-lowering) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After ConvertShapeToStandard (convert-shape-to-std) //----- //
module {
  func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After Inliner (inline) //----- //
module {
  func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After DemoteI64ToI32 (iree-util-demote-i64-to-i32) //----- //
module {
  func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After DemoteF64ToF32 (iree-util-demote-f64-to-f32) //----- //
module {
  func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After HloLegalizeShapeComputationsPass (hlo-legalize-shape-computations) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After ConvertMHLOToLinalgExt (iree-mhlo-to-linalg-ext) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After ConvertMHLOToLinalgOnTensors (iree-mhlo-to-linalg-on-tensors) //----- //
module {
  func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After ReconcileUnrealizedCasts (reconcile-unrealized-casts) //----- //
module {
  func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After VerifyCompilerMHLOInputLegality (iree-mhlo-verify-compiler-input-legality) //----- //
module {
  func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After IREEImportPublic (iree-import-public) //----- //
module {
  func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After ImportMLProgram (iree-import-ml-program) //----- //
module {
  func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After SanitizeModuleNames (iree-sanitize-module-names) //----- //
module {
  func.func @matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After mlir::iree_compiler::IREE::ABI::WrapEntryPointsPass (iree-abi-wrap-entry-points) //----- //
module {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = call @_matmul_static(%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> tensor<3x3xf32>
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
  func.func private @_matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
    %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    return %0 : tensor<3x3xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func private @_matmul_static(%arg0: tensor<3x5xf32>, %arg1: tensor<5x3xf32>, %arg2: tensor<3x3xf32>) -> tensor<3x3xf32> {
  %0 = linalg.matmul ins(%arg0, %arg1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%arg2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  return %0 : tensor<3x3xf32>
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = call @_matmul_static(%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After Inliner (inline) //----- //
module {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
module {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After DemoteF64ToF32 (iree-util-demote-f64-to-f32) //----- //
module {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After DetachElementwiseFromNamedOps (iree-flow-detach-elementwise-from-named-ops) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After LinalgNamedOpConversion (linalg-named-op-conversion) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After Convert1X1FilterConv2DToMatmul (iree-flow-convert-1x1-filter-conv2d-to-matmul) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After VerifyInputLegality (iree-verify-input-legality) //----- //
module {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After ExpandTensorShapes (iree-flow-expand-tensor-shapes) //----- //
module {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
module attributes {iree.fixedpoint.iteration = 0 : index} {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module attributes {iree.fixedpoint.iteration = 0 : index} {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module attributes {iree.fixedpoint.iteration = 0 : index} {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After FixedPointIterator (iree-util-fixed-point-iterator) //----- //
module {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After TensorPadToTensorInsertSlice (iree-flow-tensor-pad-to-tensor-insert-slice) //----- //
module {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After ConvertElementwiseToLinalg (convert-elementwise-to-linalg) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After LinalgFoldUnitExtentDims (linalg-fold-unit-extent-dims) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After InterchangeGenericOps (iree-flow-interchange-generic-ops) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After ResolveShapedTypeResultDims (resolve-shaped-type-result-dims) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After FusionOfTensorOps (iree-flow-fusion-of-tensor-ops) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After LinalgDetensorize (linalg-detensorize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CollapseDims (iree-flow-collapse-dims) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After SplitReduction (iree-flow-split-reduction-ops) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After InterchangeGenericOps (iree-flow-interchange-generic-ops) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After FormDispatchRegions (iree-flow-form-dispatch-regions) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1_0 = arith.constant 1 : index
  %3 = affine.apply affine_map<()[s0, s1, s2] -> ((s1 - s0) ceildiv s2)>()[%c0, %c3, %c1_0]
  %c0_1 = arith.constant 0 : index
  %c3_2 = arith.constant 3 : index
  %c1_3 = arith.constant 1 : index
  %4 = affine.apply affine_map<()[s0, s1, s2] -> ((s1 - s0) ceildiv s2)>()[%c0_1, %c3_2, %c1_3]
  %c0_4 = arith.constant 0 : index
  %c1_5 = arith.constant 1 : index
  %5 = affine.apply affine_map<()[s0, s1, s2] -> ((s1 - s0) ceildiv s2)>()[%c0_4, %c1, %c1_5]
  %6 = flow.dispatch.region[%3, %4, %5] -> (tensor<3x3xf32>) {
    %8 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    flow.return %8 : tensor<3x3xf32>
  } count(%arg3: index, %arg4: index, %arg5: index) -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg3, %arg4, %arg5
    flow.return %x, %y, %z : index, index, index
  }
  %7 = hal.tensor.export %6 : tensor<3x3xf32> -> !hal.buffer_view
  return %7 : !hal.buffer_view
}

// -----// IR Dump After CollapseDimensions (iree-flow-collapse-dimensions) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch.region[%c3, %c3, %c1] -> (tensor<3x3xf32>) {
    %5 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
    flow.return %5 : tensor<3x3xf32>
  } count(%arg3: index, %arg4: index, %arg5: index) -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg3, %arg4, %arg5
    flow.return %x, %y, %z : index, index, index
  }
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After FormDispatchWorkgroups (iree-flow-form-dispatch-workgroups) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch.workgroups[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2 =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg5: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
    %5 = flow.dispatch.tensor.load %arg3, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
    %6 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
    %7 = flow.dispatch.tensor.load %arg5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
    %8 = linalg.matmul ins(%5, %6 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%7 : tensor<3x3xf32>) -> tensor<3x3xf32>
    flow.dispatch.tensor.store %8, %arg5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
    flow.return
  } count(%arg3: index, %arg4: index, %arg5: index) -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg3, %arg4, %arg5
    flow.return %x, %y, %z : index, index, index
  }
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CaptureDispatchDynamicDims (iree-flow-capture-dispatch-dynamic-dims) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch.workgroups[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2 =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg5: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
    %5 = flow.dispatch.tensor.load %arg3, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
    %6 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
    %7 = flow.dispatch.tensor.load %arg5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
    %8 = linalg.matmul ins(%5, %6 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%7 : tensor<3x3xf32>) -> tensor<3x3xf32>
    flow.dispatch.tensor.store %8, %arg5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
    flow.return
  } count(%arg3: index, %arg4: index, %arg5: index) -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg3, %arg4, %arg5
    flow.return %x, %y, %z : index, index, index
  }
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch.workgroups[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2 =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg5: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
    %5 = flow.dispatch.tensor.load %arg3, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
    %6 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
    %7 = flow.dispatch.tensor.load %arg5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
    %8 = linalg.matmul ins(%5, %6 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%7 : tensor<3x3xf32>) -> tensor<3x3xf32>
    flow.dispatch.tensor.store %8, %arg5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
    flow.return
  } count(%arg3: index, %arg4: index, %arg5: index) -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg3, %arg4, %arg5
    flow.return %x, %y, %z : index, index, index
  }
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch.workgroups[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2 =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg5: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
    %5 = flow.dispatch.tensor.load %arg3, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
    %6 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
    %7 = flow.dispatch.tensor.load %arg5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
    %8 = linalg.matmul ins(%5, %6 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%7 : tensor<3x3xf32>) -> tensor<3x3xf32>
    flow.dispatch.tensor.store %8, %arg5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
    flow.return
  } count(%arg3: index, %arg4: index, %arg5: index) -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg3, %arg4, %arg5
    flow.return %x, %y, %z : index, index, index
  }
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After InitializeEmptyTensors (iree-flow-initialize-empty-tensors) //----- //
module {
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = flow.dispatch.workgroups[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2 =
        (%arg3: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg5: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
      %5 = flow.dispatch.tensor.load %arg3, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
      %6 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
      %7 = flow.dispatch.tensor.load %arg5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
      %8 = linalg.matmul ins(%5, %6 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%7 : tensor<3x3xf32>) -> tensor<3x3xf32>
      flow.dispatch.tensor.store %8, %arg5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
      flow.return
    } count(%arg3: index, %arg4: index, %arg5: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg3, %arg4, %arg5
      flow.return %x, %y, %z : index, index, index
    }
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After OutlineDispatchRegions (iree-flow-outline-dispatch-regions) //----- //
module {
  flow.executable private @matmul_static_dispatch_0 {
    flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After StripDebugOps (iree-util-strip-debug-ops) //----- //
flow.executable private @matmul_static_dispatch_0 {
  flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
    flow.return %x, %y, %z : index, index, index
  }
  builtin.module {
    func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
      %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
      %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
      %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
      %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
      flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
      return
    }
  }
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After DeduplicateExecutables (iree-flow-deduplicate-executables) //----- //
module {
  flow.executable private @matmul_static_dispatch_0 {
    flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After CleanupTensorShapes (iree-flow-cleanup-tensor-shapes) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
flow.executable private @matmul_static_dispatch_0 {
  flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
    flow.return %x, %y, %z : index, index, index
  }
  builtin.module {
    func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
      %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
      %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
      %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
      %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
      flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
      return
    }
  }
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
flow.executable private @matmul_static_dispatch_0 {
  flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
    flow.return %x, %y, %z : index, index, index
  }
  builtin.module {
    func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
      %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
      %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
      %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
      %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
      flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
      return
    }
  }
}

// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
module {
  flow.executable private @matmul_static_dispatch_0 {
    flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyInput (iree-stream-verify-input) //----- //
module {
  flow.executable private @matmul_static_dispatch_0 {
    flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After OutlineConstants (iree-stream-outline-constants) //----- //
module {
  flow.executable private @matmul_static_dispatch_0 {
    flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
  %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
  %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
  %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
  %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
module {
  flow.executable private @matmul_static_dispatch_0 {
    flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module {
  flow.executable private @matmul_static_dispatch_0 {
    flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module {
  flow.executable private @matmul_static_dispatch_0 {
    flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module {
  flow.executable private @matmul_static_dispatch_0 {
    flow.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !flow.dispatch.tensor<readonly:tensor<3x5xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<5x3xf32>>, %arg2: !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>) {
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %3 = linalg.matmul ins(%0, %1 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%2 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %3, %arg2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %0 = hal.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32>
    %1 = hal.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32>
    %2 = hal.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32>
    %3 = flow.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0, %1, %2) : (tensor<3x5xf32>, tensor<5x3xf32>, tensor<3x3xf32>) -> %2
    %4 = hal.tensor.export %3 : tensor<3x3xf32> -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After ConvertToStream (iree-stream-conversion) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c3_0 = arith.constant 3 : index
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3_0, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.sizeof tensor<3x5xf32> : index
    %1 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} -> !stream.resource<*>{%0}
    %c553648160_i32_1 = arith.constant 553648160 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %c5_3 = arith.constant 5 : index
    %c3_4 = arith.constant 3 : index
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5_3, %c3_4]) type(%c553648160_i32_1) encoding(%c1_i32_2)
    %3 = stream.tensor.sizeof tensor<5x3xf32> : index
    %4 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} -> !stream.resource<*>{%3}
    %c553648160_i32_5 = arith.constant 553648160 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %c3_7 = arith.constant 3 : index
    %c3_8 = arith.constant 3 : index
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3_7, %c3_8]) type(%c553648160_i32_5) encoding(%c1_i32_6)
    %6 = stream.tensor.sizeof tensor<3x3xf32> : index
    %7 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} -> !stream.resource<*>{%6}
    %c0 = arith.constant 0 : index
    %9 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%2[%c0 to %0 for %0], %5[%c0 to %3 for %3], %8[%c0 to %6 for %6]) : (!stream.resource<*>{%0}, !stream.resource<*>{%3}, !stream.resource<*>{%6}) -> %8{%6}
    %10 = stream.async.transfer %9 : !stream.resource<*>{%6} -> !stream.resource<external>{%6}
    %11 = stream.tensor.export %10 : tensor<3x3xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
    return %11 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyLoweringToTensors (iree-stream-verify-lowering-to-tensors) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c3_0 = arith.constant 3 : index
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3_0, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.sizeof tensor<3x5xf32> : index
    %1 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} -> !stream.resource<*>{%0}
    %c553648160_i32_1 = arith.constant 553648160 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %c5_3 = arith.constant 5 : index
    %c3_4 = arith.constant 3 : index
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5_3, %c3_4]) type(%c553648160_i32_1) encoding(%c1_i32_2)
    %3 = stream.tensor.sizeof tensor<5x3xf32> : index
    %4 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} -> !stream.resource<*>{%3}
    %c553648160_i32_5 = arith.constant 553648160 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %c3_7 = arith.constant 3 : index
    %c3_8 = arith.constant 3 : index
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3_7, %c3_8]) type(%c553648160_i32_5) encoding(%c1_i32_6)
    %6 = stream.tensor.sizeof tensor<3x3xf32> : index
    %7 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} -> !stream.resource<*>{%6}
    %c0 = arith.constant 0 : index
    %9 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%2[%c0 to %0 for %0], %5[%c0 to %3 for %3], %8[%c0 to %6 for %6]) : (!stream.resource<*>{%0}, !stream.resource<*>{%3}, !stream.resource<*>{%6}) -> %8{%6}
    %10 = stream.async.transfer %9 : !stream.resource<*>{%6} -> !stream.resource<external>{%6}
    %11 = stream.tensor.export %10 : tensor<3x3xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
    return %11 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.sizeof tensor<3x5xf32> : index
  %1 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%0}
  %2 = stream.async.transfer %1 : !stream.resource<external>{%0} -> !stream.resource<*>{%0}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %3 = stream.tensor.sizeof tensor<5x3xf32> : index
  %4 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%3}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%3} -> !stream.resource<*>{%3}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %6 = stream.tensor.sizeof tensor<3x3xf32> : index
  %7 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%6}
  %8 = stream.async.transfer %7 : !stream.resource<external>{%6} -> !stream.resource<*>{%6}
  %9 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%2[%c0 to %0 for %0], %5[%c0 to %3 for %3], %8[%c0 to %6 for %6]) : (!stream.resource<*>{%0}, !stream.resource<*>{%3}, !stream.resource<*>{%6}) -> %8{%6}
  %10 = stream.async.transfer %9 : !stream.resource<*>{%6} -> !stream.resource<external>{%6}
  %11 = stream.tensor.export %10 : tensor<3x3xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
  return %11 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.sizeof tensor<3x5xf32> : index
  %1 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%0}
  %2 = stream.async.transfer %1 : !stream.resource<external>{%0} -> !stream.resource<*>{%0}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %3 = stream.tensor.sizeof tensor<5x3xf32> : index
  %4 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%3}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%3} -> !stream.resource<*>{%3}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %6 = stream.tensor.sizeof tensor<3x3xf32> : index
  %7 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%6}
  %8 = stream.async.transfer %7 : !stream.resource<external>{%6} -> !stream.resource<*>{%6}
  %9 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%2[%c0 to %0 for %0], %5[%c0 to %3 for %3], %8[%c0 to %6 for %6]) : (!stream.resource<*>{%0}, !stream.resource<*>{%3}, !stream.resource<*>{%6}) -> %8{%6}
  %10 = stream.async.transfer %9 : !stream.resource<*>{%6} -> !stream.resource<external>{%6}
  %11 = stream.tensor.export %10 : tensor<3x3xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
  return %11 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.sizeof tensor<3x5xf32> : index
  %1 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%0}
  %2 = stream.async.transfer %1 : !stream.resource<external>{%0} -> !stream.resource<*>{%0}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %3 = stream.tensor.sizeof tensor<5x3xf32> : index
  %4 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%3}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%3} -> !stream.resource<*>{%3}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %6 = stream.tensor.sizeof tensor<3x3xf32> : index
  %7 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%6}
  %8 = stream.async.transfer %7 : !stream.resource<external>{%6} -> !stream.resource<*>{%6}
  %9 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%2[%c0 to %0 for %0], %5[%c0 to %3 for %3], %8[%c0 to %6 for %6]) : (!stream.resource<*>{%0}, !stream.resource<*>{%3}, !stream.resource<*>{%6}) -> %8{%6}
  %10 = stream.async.transfer %9 : !stream.resource<*>{%6} -> !stream.resource<external>{%6}
  %11 = stream.tensor.export %10 : tensor<3x3xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
  return %11 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.sizeof tensor<3x5xf32> : index
    %1 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} -> !stream.resource<*>{%0}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %3 = stream.tensor.sizeof tensor<5x3xf32> : index
    %4 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} -> !stream.resource<*>{%3}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %6 = stream.tensor.sizeof tensor<3x3xf32> : index
    %7 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} -> !stream.resource<*>{%6}
    %9 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%2[%c0 to %0 for %0], %5[%c0 to %3 for %3], %8[%c0 to %6 for %6]) : (!stream.resource<*>{%0}, !stream.resource<*>{%3}, !stream.resource<*>{%6}) -> %8{%6}
    %10 = stream.async.transfer %9 : !stream.resource<*>{%6} -> !stream.resource<external>{%6}
    %11 = stream.tensor.export %10 : tensor<3x3xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
    return %11 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.sizeof tensor<3x5xf32> : index
    %1 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} -> !stream.resource<*>{%0}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %3 = stream.tensor.sizeof tensor<5x3xf32> : index
    %4 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} -> !stream.resource<*>{%3}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %6 = stream.tensor.sizeof tensor<3x3xf32> : index
    %7 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} -> !stream.resource<*>{%6}
    %9 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%2[%c0 to %0 for %0], %5[%c0 to %3 for %3], %8[%c0 to %6 for %6]) : (!stream.resource<*>{%0}, !stream.resource<*>{%3}, !stream.resource<*>{%6}) -> %8{%6}
    %10 = stream.async.transfer %9 : !stream.resource<*>{%6} -> !stream.resource<external>{%6}
    %11 = stream.tensor.export %10 : tensor<3x3xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
    return %11 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.sizeof tensor<3x5xf32> : index
    %1 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} -> !stream.resource<*>{%0}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %3 = stream.tensor.sizeof tensor<5x3xf32> : index
    %4 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} -> !stream.resource<*>{%3}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %6 = stream.tensor.sizeof tensor<3x3xf32> : index
    %7 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} -> !stream.resource<*>{%6}
    %9 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%2[%c0 to %0 for %0], %5[%c0 to %3 for %3], %8[%c0 to %6 for %6]) : (!stream.resource<*>{%0}, !stream.resource<*>{%3}, !stream.resource<*>{%6}) -> %8{%6}
    %10 = stream.async.transfer %9 : !stream.resource<*>{%6} -> !stream.resource<external>{%6}
    %11 = stream.tensor.export %10 : tensor<3x3xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
    return %11 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.sizeof tensor<3x5xf32> : index
    %1 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} -> !stream.resource<*>{%0}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %3 = stream.tensor.sizeof tensor<5x3xf32> : index
    %4 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} -> !stream.resource<*>{%3}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %6 = stream.tensor.sizeof tensor<3x3xf32> : index
    %7 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} -> !stream.resource<*>{%6}
    %9 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%2[%c0 to %0 for %0], %5[%c0 to %3 for %3], %8[%c0 to %6 for %6]) : (!stream.resource<*>{%0}, !stream.resource<*>{%3}, !stream.resource<*>{%6}) -> %8{%6}
    %10 = stream.async.transfer %9 : !stream.resource<*>{%6} -> !stream.resource<external>{%6}
    %11 = stream.tensor.export %10 : tensor<3x3xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
    return %11 : !hal.buffer_view
  }
}


// -----// IR Dump After CombineInitializers (iree-util-combine-initializers) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.sizeof tensor<3x5xf32> : index
    %1 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} -> !stream.resource<*>{%0}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %3 = stream.tensor.sizeof tensor<5x3xf32> : index
    %4 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} -> !stream.resource<*>{%3}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %6 = stream.tensor.sizeof tensor<3x3xf32> : index
    %7 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} -> !stream.resource<*>{%6}
    %9 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%2[%c0 to %0 for %0], %5[%c0 to %3 for %3], %8[%c0 to %6 for %6]) : (!stream.resource<*>{%0}, !stream.resource<*>{%3}, !stream.resource<*>{%6}) -> %8{%6}
    %10 = stream.async.transfer %9 : !stream.resource<*>{%6} -> !stream.resource<external>{%6}
    %11 = stream.tensor.export %10 : tensor<3x3xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
    return %11 : !hal.buffer_view
  }
}


// -----// IR Dump After EncodeDeviceTensors (iree-stream-encode-device-tensors) //----- //
stream.executable private @matmul_static_dispatch_0 {
  stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
    stream.return %x, %y, %z : index, index, index
  }
  builtin.module {
    func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
      %c0 = arith.constant 0 : index
      %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
      %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
      %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
      %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
      %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
      %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
      %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
      flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
      return
    }
  }
}

// -----// IR Dump After EncodeHostTensors (iree-stream-encode-host-tensors) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
  %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
  %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %8 : !hal.buffer_view
}

// -----// IR Dump After MaterializeBuiltins (iree-stream-materialize-builtins) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
    %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
    %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
    %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
  %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
  %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %8 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
  %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
  %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %8 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
  %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
  %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %8 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
    %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
    %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
    %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
    %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
    %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
    %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
    %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
    %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
    %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
    %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
    %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
    %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After MaterializeCopyOnWrite (iree-stream-materialize-copy-on-write) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
  %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
  %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %8 : !hal.buffer_view
}

// -----// IR Dump After ElideAsyncCopies (iree-stream-elide-async-copies) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
    %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
    %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
    %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
  %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
  %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %8 : !hal.buffer_view
}

// -----// IR Dump After EmplaceAllocations (iree-stream-emplace-allocations) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c60} -> !stream.resource<*>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %4 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c36} -> !stream.resource<*>{%c36}
  %6 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%1[%c0 to %c60 for %c60], %3[%c0 to %c60 for %c60], %5[%c0 to %c36 for %c36]) : (!stream.resource<*>{%c60}, !stream.resource<*>{%c60}, !stream.resource<*>{%c36}) -> %5{%c36}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c36} -> !stream.resource<external>{%c36}
  %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %8 : !hal.buffer_view
}

// -----// IR Dump After RefineUsage (iree-stream-refine-usage) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0[%c0 to %c60 for %c60], %1[%c0 to %c60 for %c60], %2[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %2{%c36}
    %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0[%c0 to %c60 for %c60], %1[%c0 to %c60 for %c60], %2[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %2{%c36}
  %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0[%c0 to %c60 for %c60], %1[%c0 to %c60 for %c60], %2[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %2{%c36}
  %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0[%c0 to %c60 for %c60], %1[%c0 to %c60 for %c60], %2[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %2{%c36}
  %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0[%c0 to %c60 for %c60], %1[%c0 to %c60 for %c60], %2[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %2{%c36}
    %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0[%c0 to %c60 for %c60], %1[%c0 to %c60 for %c60], %2[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %2{%c36}
    %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0[%c0 to %c60 for %c60], %1[%c0 to %c60 for %c60], %2[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %2{%c36}
    %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%0[%c0 to %c60 for %c60], %1[%c0 to %c60 for %c60], %2[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %2{%c36}
    %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After ScheduleExecution (iree-stream-schedule-execution) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %results, %result_timepoint = stream.async.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) -> %2{%c36} {
    %5 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%arg3[%c0 to %c60 for %c60], %arg4[%c0 to %c60 for %c60], %arg5[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %arg5{%c36}
    stream.yield %5 : !stream.resource<external>{%c36}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c36}
  %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After ScheduleConcurrency (iree-stream-schedule-concurrency) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %results, %result_timepoint = stream.async.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) -> %2{%c36} {
    %5 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%arg3[%c0 to %c60 for %c60], %arg4[%c0 to %c60 for %c60], %arg5[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %arg5{%c36}
    stream.yield %5 : !stream.resource<external>{%c36}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c36}
  %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After PropagateTimepoints (iree-stream-propagate-timepoints) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.timepoint.immediate => !stream.timepoint
    %4 = stream.timepoint.immediate => !stream.timepoint
    %5 = stream.timepoint.immediate => !stream.timepoint
    %6 = stream.timepoint.immediate => !stream.timepoint
    %results, %result_timepoint = stream.async.execute await(%6) => with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) -> %2{%c36} {
      %9 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%arg3[%c0 to %c60 for %c60], %arg4[%c0 to %c60 for %c60], %arg5[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %arg5{%c36}
      stream.yield %9 : !stream.resource<external>{%c36}
    } => !stream.timepoint
    %7 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c36}
    %8 = stream.tensor.export %7 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %results, %result_timepoint = stream.async.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) -> %2{%c36} {
    %5 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%arg3[%c0 to %c60 for %c60], %arg4[%c0 to %c60 for %c60], %arg5[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %arg5{%c36}
    stream.yield %5 : !stream.resource<external>{%c36}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c36}
  %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %results, %result_timepoint = stream.async.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) -> %2{%c36} {
    %5 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%arg3[%c0 to %c60 for %c60], %arg4[%c0 to %c60 for %c60], %arg5[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %arg5{%c36}
    stream.yield %5 : !stream.resource<external>{%c36}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c36}
  %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %results, %result_timepoint = stream.async.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) -> %2{%c36} {
    %5 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%arg3[%c0 to %c60 for %c60], %arg4[%c0 to %c60 for %c60], %arg5[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %arg5{%c36}
    stream.yield %5 : !stream.resource<external>{%c36}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c36}
  %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %4 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %results, %result_timepoint = stream.async.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) -> %2{%c36} {
      %5 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%arg3[%c0 to %c60 for %c60], %arg4[%c0 to %c60 for %c60], %arg5[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %arg5{%c36}
      stream.yield %5 : !stream.resource<external>{%c36}
    } => !stream.timepoint
    %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c36}
    %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %results, %result_timepoint = stream.async.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) -> %2{%c36} {
      %5 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%arg3[%c0 to %c60 for %c60], %arg4[%c0 to %c60 for %c60], %arg5[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %arg5{%c36}
      stream.yield %5 : !stream.resource<external>{%c36}
    } => !stream.timepoint
    %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c36}
    %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %results, %result_timepoint = stream.async.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) -> %2{%c36} {
      %5 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%arg3[%c0 to %c60 for %c60], %arg4[%c0 to %c60 for %c60], %arg5[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %arg5{%c36}
      stream.yield %5 : !stream.resource<external>{%c36}
    } => !stream.timepoint
    %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c36}
    %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %results, %result_timepoint = stream.async.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) -> %2{%c36} {
      %5 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%arg3[%c0 to %c60 for %c60], %arg4[%c0 to %c60 for %c60], %arg5[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %arg5{%c36}
      stream.yield %5 : !stream.resource<external>{%c36}
    } => !stream.timepoint
    %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c36}
    %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyLoweringToAsync (iree-stream-verify-lowering-to-async) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %results, %result_timepoint = stream.async.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) -> %2{%c36} {
      %5 = stream.async.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%arg3[%c0 to %c60 for %c60], %arg4[%c0 to %c60 for %c60], %arg5[%c0 to %c36 for %c36]) : (!stream.resource<external>{%c60}, !stream.resource<external>{%c60}, !stream.resource<external>{%c36}) -> %arg5{%c36}
      stream.yield %5 : !stream.resource<external>{%c36}
    } => !stream.timepoint
    %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c36}
    %4 = stream.tensor.export %3 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After ScheduleAllocation (iree-stream-schedule-allocation) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %c0_0 = arith.constant 0 : index
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After PackConstants (iree-stream-pack-constants) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %c0_0 = arith.constant 0 : index
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After PackAllocations (iree-stream-pack-allocations) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %c0_0 = arith.constant 0 : index
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After LayoutSlices (iree-stream-layout-slices) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %c0_0 = arith.constant 0 : index
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After PropagateSubranges (iree-util-propagate-subranges) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %c0_0 = arith.constant 0 : index
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyLoweringToCmd (iree-stream-verify-lowering-to-cmd) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
module attributes {iree.fixedpoint.iteration = 0 : index} {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module attributes {iree.fixedpoint.iteration = 0 : index} {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module attributes {iree.fixedpoint.iteration = 0 : index} {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module attributes {iree.fixedpoint.iteration = 0 : index} {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After ElideTimepoints (iree-stream-elide-timepoints) //----- //
module attributes {iree.fixedpoint.iteration = 0 : index} {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FixedPointIterator (iree-util-fixed-point-iterator) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseDispatchBindings (iree-stream-fuse-dispatch-bindings) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: index, %arg4: index, %arg5: index) {
        %c0 = arith.constant 0 : index
        %0 = arith.addi %c0, %arg3 : index
        %1 = stream.binding.subspan %arg0[%0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %2 = arith.addi %c0, %arg4 : index
        %3 = stream.binding.subspan %arg1[%2] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %4 = arith.addi %c0, %arg5 : index
        %5 = stream.binding.subspan %arg2[%4] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %6 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %7 = flow.dispatch.tensor.load %3, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %8 = flow.dispatch.tensor.load %5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %9 = linalg.matmul ins(%6, %7 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%8 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %9, %5, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %c0_0 = arith.constant 0 : index
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%c0, %c0, %c0 : index, index, index) {
        ro %arg3[%c0_0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0_0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0_0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After PackDispatchOperands (iree-stream-pack-dispatch-operands) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: i32, %arg4: i32, %arg5: i32) {
        %0 = arith.index_castui %arg3 : i32 to index
        %1 = arith.index_castui %arg4 : i32 to index
        %2 = arith.index_castui %arg5 : i32 to index
        %c0 = arith.constant 0 : index
        %3 = arith.addi %c0, %0 : index
        %4 = stream.binding.subspan %arg0[%3] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %5 = arith.addi %c0, %1 : index
        %6 = stream.binding.subspan %arg1[%5] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %7 = arith.addi %c0, %2 : index
        %8 = stream.binding.subspan %arg2[%7] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %9 = flow.dispatch.tensor.load %4, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %10 = flow.dispatch.tensor.load %6, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %11 = flow.dispatch.tensor.load %8, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %12 = linalg.matmul ins(%9, %10 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%11 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %12, %8, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %c0_0 = arith.constant 0 : index
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%c0_i32, %c0_i32_1, %c0_i32_2 : i32, i32, i32) {
        ro %arg3[%c0_0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0_0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0_0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After CSE (cse) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: i32, %arg4: i32, %arg5: i32) {
        %0 = arith.index_castui %arg3 : i32 to index
        %1 = arith.index_castui %arg4 : i32 to index
        %2 = arith.index_castui %arg5 : i32 to index
        %c0 = arith.constant 0 : index
        %3 = arith.addi %c0, %0 : index
        %4 = stream.binding.subspan %arg0[%3] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %5 = arith.addi %c0, %1 : index
        %6 = stream.binding.subspan %arg1[%5] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %7 = arith.addi %c0, %2 : index
        %8 = stream.binding.subspan %arg2[%7] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %9 = flow.dispatch.tensor.load %4, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %10 = flow.dispatch.tensor.load %6, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %11 = flow.dispatch.tensor.load %8, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %12 = linalg.matmul ins(%9, %10 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%11 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %12, %8, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %c0 = arith.constant 0 : index
    %c0_i32 = arith.constant 0 : i32
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1](%c0_i32, %c0_i32, %c0_i32 : i32, i32, i32) {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldUniformOperands (iree-stream-fold-uniform-operands) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding) {
        %c0_i32 = arith.constant 0 : i32
        %0 = arith.index_castui %c0_i32 : i32 to index
        %1 = arith.index_castui %c0_i32 : i32 to index
        %2 = arith.index_castui %c0_i32 : i32 to index
        %c0 = arith.constant 0 : index
        %3 = arith.addi %c0, %0 : index
        %4 = stream.binding.subspan %arg0[%3] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %5 = arith.addi %c0, %1 : index
        %6 = stream.binding.subspan %arg1[%5] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %7 = arith.addi %c0, %2 : index
        %8 = stream.binding.subspan %arg2[%7] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %9 = flow.dispatch.tensor.load %4, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %10 = flow.dispatch.tensor.load %6, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %11 = flow.dispatch.tensor.load %8, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %12 = linalg.matmul ins(%9, %10 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%11 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %12, %8, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %c0 = arith.constant 0 : index
    %c0_i32 = arith.constant 0 : i32
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After AnnotateDispatchArguments (iree-stream-annotate-dispatch-arguments) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0_i32 = arith.constant 0 : i32
        %0 = arith.index_castui %c0_i32 : i32 to index
        %1 = arith.index_castui %c0_i32 : i32 to index
        %2 = arith.index_castui %c0_i32 : i32 to index
        %c0 = arith.constant 0 : index
        %3 = arith.addi %c0, %0 : index
        %4 = stream.binding.subspan %arg0[%3] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %5 = arith.addi %c0, %1 : index
        %6 = stream.binding.subspan %arg1[%5] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %7 = arith.addi %c0, %2 : index
        %8 = stream.binding.subspan %arg2[%7] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %9 = flow.dispatch.tensor.load %4, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %10 = flow.dispatch.tensor.load %6, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %11 = flow.dispatch.tensor.load %8, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %12 = linalg.matmul ins(%9, %10 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%11 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %12, %8, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %c0 = arith.constant 0 : index
    %c0_i32 = arith.constant 0 : i32
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After MemoizeChannels (iree-stream-memoize-channels) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0_i32 = arith.constant 0 : i32
        %0 = arith.index_castui %c0_i32 : i32 to index
        %1 = arith.index_castui %c0_i32 : i32 to index
        %2 = arith.index_castui %c0_i32 : i32 to index
        %c0 = arith.constant 0 : index
        %3 = arith.addi %c0, %0 : index
        %4 = stream.binding.subspan %arg0[%3] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %5 = arith.addi %c0, %1 : index
        %6 = stream.binding.subspan %arg1[%5] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %7 = arith.addi %c0, %2 : index
        %8 = stream.binding.subspan %arg2[%7] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %9 = flow.dispatch.tensor.load %4, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %10 = flow.dispatch.tensor.load %6, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %11 = flow.dispatch.tensor.load %8, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %12 = linalg.matmul ins(%9, %10 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%11 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %12, %8, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %c0 = arith.constant 0 : index
    %c0_i32 = arith.constant 0 : i32
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c0 = arith.constant 0 : index
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c0 = arith.constant 0 : index
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c0 = arith.constant 0 : index
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After CSE (cse) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
  %c0 = arith.constant 0 : index
  %c60 = arith.constant 60 : index
  %c36 = arith.constant 36 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  %c553648160_i32 = arith.constant 553648160 : i32
  %c1_i32 = arith.constant 1 : i32
  %c5 = arith.constant 5 : index
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
  %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
  %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
  %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
    stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
      ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
      ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
      rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
  %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
  return %5 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


matmul.mlir:0:0: error: target backend 'cpu' not registered; registered backends: cuda, llvm-cpu, metal, metal, vmvx, vmvx-inline, vulkan, vulkan
// -----// IR Dump After mlir::iree_compiler::IREE::HAL::AssignTargetDevicesPass Failed (iree-hal-assign-target-devices) //----- //
module {
  stream.executable private @matmul_static_dispatch_0 {
    stream.executable.export public @matmul_static_dispatch_0_matmul_3x3x5 workgroups(%arg0: index, %arg1: index, %arg2: index) -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_dag_root %arg0, %arg1, %arg2
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @matmul_static_dispatch_0_matmul_3x3x5(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<3x5xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<5x3xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        %3 = flow.dispatch.tensor.load %0, offsets = [0, 0], sizes = [3, 5], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<3x5xf32>> -> tensor<3x5xf32>
        %4 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [5, 3], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<5x3xf32>> -> tensor<5x3xf32>
        %5 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : !flow.dispatch.tensor<readwrite:tensor<3x3xf32>> -> tensor<3x3xf32>
        %6 = linalg.matmul ins(%3, %4 : tensor<3x5xf32>, tensor<5x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
        flow.dispatch.tensor.store %6, %2, offsets = [0, 0], sizes = [3, 3], strides = [1, 1] : tensor<3x3xf32> -> !flow.dispatch.tensor<readwrite:tensor<3x3xf32>>
        return
      }
    }
  }
  func.func @matmul_static(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %c0 = arith.constant 0 : index
    %c60 = arith.constant 60 : index
    %c36 = arith.constant 36 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c553648160_i32 = arith.constant 553648160 : i32
    %c1_i32 = arith.constant 1 : i32
    %c5 = arith.constant 5 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("tensor") shape([%c3, %c5]) type(%c553648160_i32) encoding(%c1_i32)
    %0 = stream.tensor.import %arg0 : !hal.buffer_view -> tensor<3x5xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("tensor") shape([%c5, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %1 = stream.tensor.import %arg1 : !hal.buffer_view -> tensor<5x3xf32> in !stream.resource<external>{%c60}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("tensor") shape([%c3, %c3]) type(%c553648160_i32) encoding(%c1_i32)
    %2 = stream.tensor.import %arg2 : !hal.buffer_view -> tensor<3x3xf32> in !stream.resource<external>{%c36}
    %3 = stream.cmd.execute with(%0 as %arg3: !stream.resource<external>{%c60}, %1 as %arg4: !stream.resource<external>{%c60}, %2 as %arg5: !stream.resource<external>{%c36}) {
      stream.cmd.dispatch @matmul_static_dispatch_0::@matmul_static_dispatch_0_matmul_3x3x5[%c3, %c3, %c1] {
        ro %arg3[%c0 for %c60] : !stream.resource<external>{%c60},
        ro %arg4[%c0 for %c60] : !stream.resource<external>{%c60},
        rw %arg5[%c0 for %c36] : !stream.resource<external>{%c36}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %2 : !stream.resource<external>{%c36}
    %5 = stream.tensor.export %4 : tensor<3x3xf32> in !stream.resource<external>{%c36} -> !hal.buffer_view
    return %5 : !hal.buffer_view
  }
}


